from telegram import Update, Bot
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)
from bot.config import TOKEN, ADMIN_ID, DB_URL
from bot.database import init_db, save_message, get_all_messages, is_user_authorized
from telegram.error import Conflict

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–º–∏.")

# async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if isinstance(context.error, Conflict):
#         print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –±–æ—Ç–∞! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å...")
#         await context.application.stop()
#         exit(1)
#     else:
#         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {context.error}")

# if __name__ == "__main__":
#     application = ApplicationBuilder().token(TOKEN).build()
    
#     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#     application.add_error_handler(error_handler)
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(CommandHandler("history", show_history))
#     application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_message))
    
#     # –ó–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤–µ—Ä—Å–∏–π
#     application.run_polling(
#         stop_signals=(SIGINT, SIGTERM),
#         close_loop=False,
#         drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#     )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and update.message.chat.type in ['group', 'supergroup']:
        user = update.effective_user
        if is_user_authorized(user.id):
            original_msg = update.message.reply_to_message
            reply_text = update.message.text
            
            save_message(
                original_text=original_msg.text,
                reply_text=reply_text
            )
            
            # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
            # await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if is_user_authorized(user.id):
        messages = get_all_messages()  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
        
        response = "\n\n".join(
            [f"‚ùì: {msg[0]}\n‚úÖ: {msg[1]}\nüìÖ: {msg[2]}" 
             for msg in messages]
        )
        
        await update.message.reply_text(response or "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è")
    else:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")

if __name__ == "__main__":
    init_db()
    
    application = ApplicationBuilder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", show_history))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
        handle_message
    ))
    
    application.run_polling()

# if __name__ == "__main__":
#     application = ApplicationBuilder().token(TOKEN).build()
      
#     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#     application.add_error_handler(error_handler)
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(CommandHandler("history", show_history))
#     application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_message))
      
#     # –ó–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤–µ—Ä—Å–∏–π
#     application.run_polling(
#       stop_signals=(SIGINT, SIGTERM),
#       close_loop=False,
#       drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#     )